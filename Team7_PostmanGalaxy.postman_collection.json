{
	"info": {
		"_postman_id": "0b65353a-efc5-4d07-b146-3df73edd4210",
		"name": "Team7_PostmanGalaxy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37274119",
		"_collection_link": "https://lunar-eclipse-368965.postman.co/workspace/Team-Workspace~b02644e0-0b66-4056-83eb-197e346ea24d/collection/39549874-0b65353a-efc5-4d07-b146-3df73edd4210?action=share&source=collection_link&creator=37274119"
	},
	"item": [
		{
			"name": "UserLogin",
			"item": [
				{
					"name": "DDH User Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"var AdminBearer_TokenLMS = JsonData.token;\r",
									"pm.environment.set(\"AdminBearer_TokenLMS\", AdminBearer_TokenLMS );\r",
									"\r",
									"\r",
									"//capture userId\r",
									"var jsonData = pm.response.json();\r",
									"var userId1 = jsonData.userId;\r",
									"pm.environment.set(\"userId\", userId1);\r",
									"pm.globals.set(\"userId\", userId1);\r",
									"console.log(\"Captured userId:\", userId1);\r",
									"\r",
									"\r",
									"// Check that a response header is present:\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"// Test for a response header having a particular value:\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"// Parse the JSON response\r",
									"let response = pm.response.json();  // Ensure 'response' is defined here\r",
									"\r",
									"// Validate that userId exists and is a string\r",
									"pm.test(\"userId is a string\", function () {\r",
									"    if (response.userId) {\r",
									"        pm.expect(response.userId).to.be.a(\"string\");\r",
									"    } else {\r",
									"        pm.expect(response.userId, \"userId is not defined\").to.exist;\r",
									"    }\r",
									"\r",
									"// To validate status code\r",
									"pm.test(\"Validating Status Code\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\") || 200);\r",
									"    //pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\") );\r",
									"});\r",
									"\r",
									"// Get the status code of the response\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"\r",
									"    // Schema validating\r",
									"    var jsonData = pm.response.json();\r",
									"    var schema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"token\": { \"type\": \"string\" },\r",
									"            \"type\": { \"type\": \"string\" },\r",
									"            \"userId\": { \"type\": \"string\" },\r",
									"            \"email\": { \"type\": \"string\" },\r",
									"            \"roles\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": { \"type\": \"string\" }\r",
									"            },\r",
									"            \"status\": { \"type\": \"string\" },\r",
									"            \"passwordExpired\": { \"type\": \"boolean\" }\r",
									"        },\r",
									"        \"required\": [\"token\", \"type\", \"userId\", \"email\", \"roles\", \"status\", \"passwordExpired\"]\r",
									"    };\r",
									"\r",
									"    // Validate the schema\r",
									"    pm.test('Schema is valid', function() {\r",
									"        pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
									"    });\r",
									"\r",
									"    // Validate status text\r",
									"    pm.test(\"Status code name has OK\", () => {\r",
									"        pm.response.to.have.status(\"OK\");\r",
									"    });\r",
									"} else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}\r",
									"});\r",
									"//Testing headers\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userLoginEmailId\": \"{{userLogin_EmailId1}}\",\r\n  \"password\":\"{{password1}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{endpoint}}",
							"host": [
								"{{BaseURL}}{{endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Program",
			"item": [
				{
					"name": "AddNewProgram",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"\r",
									"var programId = JsonData.programId;\r",
									"var programName = JsonData.programName;\r",
									"var statusCode = pm.response.code;\r",
									"//var programObject = pm.environment.get('programObject'); // Define programObject before using it\r",
									"\r",
									"//pm.environment.set(\"programId\", programId);\r",
									"//pm.environment.set(\"programName\", programName);\r",
									"\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"\r",
									"// Check if the status code is 201\r",
									"if (statusCode === 201) {\r",
									"    console.log('Status code is 201. Running assertions...');\r",
									"    \r",
									"    pm.test(\"Content-Type header is application/json\", ()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"});\r",
									"\r",
									"    //Check programId greater than zero\r",
									"    pm.test(\"check ProgramId Greater than zero\", function () {\r",
									"        pm.expect(programId).to.be.greaterThan(0);\r",
									"    });\r",
									"\r",
									"    const expectedJSONSchema = {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"            \"programId\": {\r",
									"                \"type\": \"integer\"\r",
									"            },\r",
									"            \"programName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"programDescription\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"programStatus\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"creationTime\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"lastModTime\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        },\r",
									"        \"required\": [\r",
									"            \"programId\",\r",
									"            \"programName\",\r",
									"            \"programDescription\",\r",
									"            \"programStatus\",\r",
									"            \"creationTime\",\r",
									"            \"lastModTime\"\r",
									"        ]\r",
									"    };\r",
									"\r",
									"    pm.test(\"Verify JSON Schema\", function () {\r",
									"        pm.response.to.have.jsonSchema(expectedJSONSchema);\r",
									"    });\r",
									"\r",
									"    // Validate programName\r",
									"    pm.test(\"programName should be a non-empty string with allowed characters\", function () {\r",
									"        pm.expect(programName.length).to.be.above(2);\r",
									"        // Length should be at least 3 characters\r",
									"        pm.expect(programName.length).to.be.below(256);\r",
									"        // Length should be at most 255 characters\r",
									"        pm.expect(programName).to.match(/^[a-zA-Z\\s]*$/);\r",
									"        // Allowed characters: alphabets and spaces\r",
									"    });\r",
									"\r",
									"    // Validate programStatus\r",
									"    pm.test(\"programStatus should be one of the allowed values\", function () {\r",
									"        let allowedStatuses = [\"Active\", \"Inactive\"];\r",
									"        pm.expect(allowedStatuses).to.include(JsonData.programStatus);\r",
									"    });\r",
									"\r",
									"    // Validate creationTime (ISO 8601 format and not in the future)\r",
									"    pm.test(\"creationTime should be a valid ISO 8601 string and not in the future\", function () {\r",
									"        let creationTime = JsonData.creationTime;\r",
									"        pm.expect(creationTime).to.match(/^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}[+-]\\d{2}:\\d{2})$/);  // ISO 8601 regex\r",
									"\r",
									"        // Get the current time and parse creationTime\r",
									"        let currentDate = new Date();\r",
									"        let creationDate = new Date(creationTime);\r",
									"\r",
									"        // Allow a small margin of time (e.g., 1 second) for response time or clock skew\r",
									"        pm.expect(creationDate.getTime()).to.be.below(currentDate.getTime() + 1000);  // Allow 1 second difference\r",
									"    });\r",
									"\r",
									"    // Validate lastModTime (ISO 8601 format, no future date, and after creationTime)\r",
									"    pm.test(\"lastModTime should be a valid ISO 8601 string, not in the future, and not before creationTime\", function () {\r",
									"        let lastModTime = JsonData.lastModTime;\r",
									"        let currentDate = new Date();\r",
									"        let lastModDate = new Date(lastModTime);\r",
									"        pm.expect(lastModDate.getTime()).to.be.below(currentDate.getTime()+ 1000);  \r",
									"        // Last modification time should not be in the future\r",
									"    });\r",
									"     // Check the type of programObject and ensure that it has a set function defined\r",
									"    pm.test(\"Check type of programObject and its set function\", function () {\r",
									"        pm.expect(pm.environment).to.be.an('object');\r",
									"        pm.expect(pm.environment).to.respondTo('set');\r",
									"    });\r",
									"\r",
									"    var programObject = pm.environment.get('data_set_entries_program');\r",
									"\r",
									"    if(programObject == null) {\r",
									"        programObject = [];\r",
									"    } else {\r",
									"        programObject = JSON.parse(programObject);\r",
									"    }\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    programObject.push(jsonData.programId);\r",
									"    programObject.push(jsonData.programName);\r",
									"    programObject.push(jsonData.programDescription);\r",
									"    programObject.push(jsonData.programStatus);\r",
									"\r",
									"    pm.environment.set('data_set_entries_program', JSON.stringify(programObject));\r",
									"\r",
									"\r",
									"   //pm.environment.set(\"data_set_entries_program\", null);\r",
									"\r",
									"// Optionally log the existing value before setting it to null\r",
									"\r",
									"\r",
									"   \r",
									"\r",
									"} else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\":\"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}\r\n\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgramById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"console.log('Inside Post');\r",
									"var jsonData = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"//var response = pm.response.json();\r",
									"console.log(jsonData);\r",
									"\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"// Get the status code of the response\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"\r",
									"// Validate programId is a number and is equal to  createdprogramId or not\r",
									"pm.test(\"programId is a number\", function () {\r",
									"    pm.expect(jsonData.programId).to.be.a('number');\r",
									"    pm.expect(jsonData.programId).to.eql(pm.environment.get(\"programId\"));\r",
									"});\r",
									"\r",
									"// Validate programName is a string\r",
									"pm.test(\"programName is a string\", function () {\r",
									"    pm.expect(jsonData.programName).to.be.a('string');\r",
									"    pm.expect(jsonData.programName).to.eql(pm.environment.get(\"ExpectedprogramName\"));\r",
									"});\r",
									"\r",
									"// Validate programDescription is a string\r",
									"/*pm.test(\"programDescription is a string\", function () {\r",
									"    pm.expect(response.programDescription).to.be.a('string');\r",
									"    pm.expect(response.programDescription).to.eql(pm.environment.get(\"ExpectedProgramDescription\"));\r",
									"});*/\r",
									"\r",
									"// Validate programStatus is a string\r",
									"pm.test(\"programStatus is a string\", function () {\r",
									"    pm.expect(jsonData.programStatus).to.be.a('string');\r",
									"    pm.expect(jsonData.programStatus).to.not.eql(pm.environment.get(\"ExpectedProgramStatus\"));\r",
									"});\r",
									"\r",
									"// Validate creationTime and lastModTime are valid ISO 8601 date strings\r",
									"pm.test(\"creationTime is a valid ISO 8601 date string\", function () {\r",
									"    pm.expect(jsonData.creationTime).to.be.a('string');\r",
									"    pm.expect(new Date(jsonData.creationTime)).not.to.be.NaN; // Check if it's a valid date\r",
									"});\r",
									"\r",
									"pm.test(\"lastModTime is a valid ISO 8601 date string\", function () {\r",
									"    pm.expect(jsonData.lastModTime).to.be.a('string');\r",
									"    pm.expect(new Date(jsonData.lastModTime)).not.to.be.NaN; // Check if it's a valid date\r",
									"});\r",
									"}\r",
									"else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var arrayData  = pm.environment.get(\"data_set_entries_program\");\r",
									"arrayData  = JSON.parse(arrayData);\r",
									"console.log(\"Existing data:\", arrayData);\r",
									"\r",
									"pm.environment.set(\"programId\", arrayData[0]);\r",
									"pm.environment.set(\"ExpectedprogramName\",arrayData[1]);\r",
									"pm.environment.set(\"ExpectedProgramDescription\", arrayData[2]);\r",
									"pm.environment.set(\"ExpectedProgramStatus\",arrayData[3]);\r",
									"\r",
									"pm.environment.set(\"program2_Id\", arrayData[4]);\r",
									"pm.environment.set(\"programName\",arrayData[5]);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\":\"{{programName}}\",\r\n  \"programStatus\":\"{{programStatus}}\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllPrograms",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"    // Ensure the response type is JSON\r",
									"    pm.test('Response should be in JSON format', function () {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"    // Validate the response is an array\r",
									"    pm.test('Response should be an array', function () {\r",
									"        pm.expect(response).to.be.an('array');\r",
									"    });\r",
									"\r",
									"    console.log('Number of Programs returned = ' + response.length);\r",
									"\r",
									"    // Initialize an array to hold the program IDs\r",
									"    let programIds = [];\r",
									"\r",
									"    // Check if the response is an array\r",
									"    if (Array.isArray(response)) {\r",
									"        // Iterate over each program object and extract the ID\r",
									"        response.forEach(program => {\r",
									"            if (program.programId) {\r",
									"                programIds.push(program.programId);\r",
									"            }\r",
									"        });\r",
									"\r",
									"        // Print the list of program IDs to the Postman console\r",
									"        console.log('Program IDs:', programIds);\r",
									"\r",
									"        // Example of using extracted IDs in assertions\r",
									"        pm.test('Extracted program IDs should be non-empty', function () {\r",
									"            pm.expect(programIds).to.have.length.above(0);\r",
									"        });\r",
									"\r",
									"       // const programIdToCheck = pm.variables.get(\"programId\"); \r",
									"       const programIdToCheck = pm.environment.get(\"programId\");\r",
									"        \r",
									"\r",
									"        // Write an assertion to check if the specific program ID is present in the response\r",
									"        pm.test(`Program ID ${programIdToCheck} should be present in the response`, function () {\r",
									"            pm.expect(programIds).to.include(programIdToCheck);\r",
									"        });\r",
									"    } else {\r",
									"        console.log('Response is not an array or does not contain program IDs.');\r",
									"    }\r",
									"}\r",
									"else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllProgramsWithUsers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"//  Ensure response is an array\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    pm.expect(response).to.be.an('array');\r",
									"});\r",
									"// Validate first item in the array (program object)\r",
									"pm.test(\"Program object is valid\", function () {\r",
									"    let program = response[0];\r",
									"    pm.expect(program.programId).to.be.a('number');\r",
									"    \r",
									"    // Check if programName is a string\r",
									"    pm.expect(program.programName).to.be.a('string');\r",
									"    \r",
									"    // Check if programDescription is a string\r",
									"    pm.expect(program.programDescription).to.be.a('string');\r",
									"    \r",
									"    // Check if programStatus is a valid string\r",
									"    pm.expect(program.programStatus).to.be.a('string');\r",
									"    \r",
									"    // Validate programUsers is an array\r",
									"    pm.expect(program.programUsers).to.be.an('array');\r",
									"    \r",
									"    // Validate the length of programUsers\r",
									"    pm.expect(program.programUsers.length).to.be.above(0);\r",
									"});\r",
									"// Validate each user in programUsers array\r",
									"response[0].programUsers.forEach(user => {\r",
									"    pm.test(`User ${user.userId} is valid`, function () {\r",
									"        // Validate userId\r",
									"        pm.expect(user.userId).to.be.a('string');\r",
									"        \r",
									"        // Validate userFirstName and userLastName\r",
									"        pm.expect(user.userFirstName).to.be.a('string');\r",
									"        pm.expect(user.userLastName).to.be.a('string');\r",
									"        \r",
									"        // Validate userPhoneNumber format (check if it's a number and length 10 digits)\r",
									"        pm.expect(user.userPhoneNumber).to.match(/^\\d{10}$/);\r",
									"        \r",
									"        // Validate userLocation is a string\r",
									"        pm.expect(user.userLocation).to.be.a('string');\r",
									"        \r",
									"        // Validate userTimeZone is a string\r",
									"        pm.expect(user.userTimeZone).to.be.a('string');\r",
									"        \r",
									"        // Validate userLinkedinUrl format (if it exists)\r",
									"        \r",
									"// Validate userLinkedinUrl format (if it exists)\r",
									"if (user.userLinkedinUrl) {\r",
									"    pm.expect(user.userLinkedinUrl).to.match(/^(https?:\\/\\/)?(www\\.)?linkedin\\.com\\//, 'LinkedIn URL is invalid');\r",
									"}\r",
									"\r",
									"\r",
									"        \r",
									"        // Validate userEduUg and userEduPg are strings\r",
									"        pm.expect(user.userEduUg).to.be.a('string');\r",
									"        pm.expect(user.userEduPg).to.be.a('string');\r",
									"        \r",
									"        // Validate userVisaStatus is a valid string\r",
									"        pm.expect(user.userVisaStatus).to.be.a('string');\r",
									"        \r",
									"        // Validate userLoginEmail format (if it exists)\r",
									"        if (user.userLoginEmail) {\r",
									"            pm.expect(user.userLoginEmail).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);\r",
									"        }\r",
									"        \r",
									"        // Validate userComments (if provided) is a string\r",
									"        if (user.userComments) {\r",
									"            pm.expect(user.userComments).to.be.a('string');\r",
									"        }\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProgramWithId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let response = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"\r",
									"\r",
									"// Validate programId is a number\r",
									"pm.test(\"programId is a number\", function () {\r",
									"    pm.expect(response.programId).to.be.a('number');\r",
									"    pm.expect(response.programId).to.eql(pm.environment.get(\"programId\"));\r",
									"});\r",
									"\r",
									"// Validate programName is a string\r",
									"pm.test(\"programName is a string\", function () {\r",
									"    pm.expect(response.programName).to.be.a('string');\r",
									"    pm.expect(response.programName).to.eql(pm.environment.get(\"ExpectedprogramName\"));\r",
									"});\r",
									"\r",
									"// Validate programDescription is a string\r",
									"pm.test(\"programDescription is a string\", function () {\r",
									"    pm.expect(response.programDescription).to.be.a('string');\r",
									"pm.expect(response.programDescription).to.eql(pm.environment.get(\"ExpectedProgramDescription\"));\r",
									"\r",
									"});\r",
									"\r",
									"// Validate programStatus is a string\r",
									"pm.test(\"programStatus is a string\", function () {\r",
									"    pm.expect(response.programStatus).to.be.a('string');\r",
									"    pm.expect(response.programStatus).to.eql(\"Inactive\");\r",
									"});\r",
									"\r",
									"// Validate creationTime and lastModTime are valid ISO 8601 date strings\r",
									"pm.test(\"creationTime is a valid ISO 8601 date string\", function () {\r",
									"    pm.expect(response.creationTime).to.be.a('string');\r",
									"    pm.expect(new Date(response.creationTime)).to.not.be.NaN; // Check if it's a valid date\r",
									"});\r",
									"\r",
									"pm.test(\"lastModTime is a valid ISO 8601 date string\", function () {\r",
									"    pm.expect(response.lastModTime).to.be.a('string');\r",
									"    pm.expect(new Date(response.lastModTime)).to.not.be.NaN; // Check if it's a valid date\r",
									"});\r",
									"\r",
									"// Validate that creationTime is equal to lastModTime (if applicable)\r",
									"pm.test(\"creationTime is the same as lastModTime\", function () {\r",
									"    pm.expect(response.creationTime).to.eql(response.lastModTime);\r",
									"});\r",
									"}else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateProgramByProgramName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response body as JSON\r",
									"let response = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"// Get the status code of the response\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"\r",
									"\r",
									"// Validate programId is a number and is equal to  createdprogramId or not\r",
									"pm.test(\"program2Id is a number\", function () {\r",
									"    pm.expect(response.programId).to.be.a('number');\r",
									"    pm.expect(response.programId).to.eql(pm.environment.get(\"program2_Id\"));\r",
									"});\r",
									"\r",
									"// Validate programName is a string\r",
									"pm.test(\"programName is a string\", function () {\r",
									"    pm.expect(response.programName).to.be.a('string');\r",
									"    pm.expect(response.programName).to.eql(pm.environment.get(\"programName\"));\r",
									"});\r",
									"}\r",
									"else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n  \"programDescription\": \"{{programDescription}}\",\r\n  \"programName\":\"{{programName}}\",\r\n  \"programStatus\": \"{{programStatus}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProgramById",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*var responseJson = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"console.log(\"Response  for deleting program with id\", responseJson.message);\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"// Test to ensure that the response contains a 'message' field\r",
									"pm.test(\"Response contains a message\", function () {\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson.message).to.not.be.empty;\r",
									"    pm.expect(responseJson.message).to.contains(\"deleted Successfully!\");\r",
									"    pm.expect(responseJson.success).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"}else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}*/\r",
									"var responseText = pm.response.text();\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"console.log(\"Response for deleting program with ID\", responseText);\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"// Test to ensure that the response contains a 'message' field\r",
									"pm.test(\"Response contains a message\", function () {\r",
									"    pm.expect(responseText).to.include(\"Message\");\r",
									"    pm.expect(responseText).to.contains(\"deleted Successfully!\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"}else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"   /* pm.test(\"Success is true\", function () {\r",
									"    pm.expect(responseText).to.include(\"Success\");\r",
									"    pm.expect(responseText).to.include(\"false\");\r",
									"});*/\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Batch",
			"item": [
				{
					"name": "Create new batch_DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var JsonData = pm.response.json();\r",
									"\r",
									"var BatchID = JsonData.batchId;\r",
									"pm.environment.set(\"BatchID\", BatchID );\r",
									"\r",
									"var batchName=JsonData.batchName;\r",
									"pm.environment.set(\"batchName\",batchName);\r",
									"\r",
									"//var programId=JsonData.programId;\r",
									"//pm.environment.set(\"programId\",programId);\r",
									"\r",
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"\r",
									"//To validate status code\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"StatusCode\"));\r",
									"});\r",
									"// Validate the status code\r",
									"// pm.test(\"Status code is correct\", function () {\r",
									"//     pm.response.to.have.status(expectedStatus);\r",
									"// });\r",
									"\r",
									"//validate response message\r",
									"// pm.test(\"Response Message\",() => {\r",
									"//   pm.expect(pm.response.text()).to.include(expectedMessage);\r",
									"// });\r",
									"\r",
									"\r",
									"// Get the status code of the response\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 201) {\r",
									"    console.log('Status code is 201. Running assertions...');\r",
									"    const expectedJSONSchema ={\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {},\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"//Validate the schema response body\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema (expectedJSONSchema);\r",
									"});\r",
									"// Validate BatchName\r",
									"    pm.test(\"BatchName should be a non-empty string with allowed characters\", function () {\r",
									"        pm.expect(batchName.length).to.be.above(2);\r",
									"        // Length should be at least 3 characters\r",
									"        pm.expect(batchName.length).to.be.below(256);\r",
									"        // Length should be at most 255 characters\r",
									"        pm.expect(batchName).to.match(/^[a-zA-Z\\s]*$/);\r",
									"        // Allowed characters: alphabets and spaces\r",
									"    });\r",
									"\r",
									"// Validate BatchStatus\r",
									"    pm.test(\"BatchStatus should be one of the allowed values\", function () {\r",
									"        let allowedStatuses = [\"Active\", \"Inactive\"];\r",
									"        pm.expect(allowedStatuses).to.include(JsonData.batchStatus);\r",
									"    });\r",
									"    var batchObject = pm.environment.get('data_set_entries_batch');\r",
									"\r",
									"    if(batchObject== null) {\r",
									"        batchObject = [];\r",
									"    } else {\r",
									"        batchObject = JSON.parse(batchObject);\r",
									"    }\r",
									"\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    batchObject.push(jsonData.batchId);\r",
									"    batchObject.push(jsonData.batchName);\r",
									"   \r",
									"    pm.environment.set('data_set_entries_batch', JSON.stringify(batchObject));\r",
									"\r",
									"\r",
									"   //pm.environment.set(\"data_set_entries_program\", null);\r",
									"// Optionally log the existing value before setting it to null\r",
									"\r",
									"\r",
									"    // Check the type of programObject and ensure that it has a set function defined\r",
									"    pm.test(\"Check type of programObject and its set function\", function () {\r",
									"        pm.expect(pm.environment).to.be.an('object');\r",
									"        pm.expect(pm.environment).to.respondTo('set');\r",
									"    });\r",
									"\r",
									"}\r",
									"else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n  \"programId\": \"{{program2_Id}}\",\r\n  \"programName\": \"{{programName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{EndPoint}}",
							"host": [
								"{{BaseURL}}{{EndPoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Batches_DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"//validate response code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate response message\r",
									"pm.test(\"batchName\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"});\r",
									"\r",
									"//Fix the failing test for response time\r",
									"pm.test(\"Response time is within acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batch by Program ID_DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"//Schema validating\r",
									"var jsonData = pm.response.json();\r",
									"var schema={\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"null\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"//Validate the response body\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"//validate response code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}{{program2_Id}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}{{program2_Id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batch Name_DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"var schema={\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"batchId\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"batchName\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchDescription\": {\r",
									"        \"type\": \"null\"\r",
									"      },\r",
									"      \"batchStatus\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"batchNoOfClasses\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"programId\": {\r",
									"        \"type\": \"integer\"\r",
									"      },\r",
									"      \"programName\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"batchId\",\r",
									"      \"batchName\",\r",
									"      \"batchDescription\",\r",
									"      \"batchStatus\",\r",
									"      \"batchNoOfClasses\",\r",
									"      \"programId\",\r",
									"      \"programName\"\r",
									"    ]\r",
									"  }\r",
									"}\r",
									"//Validate the response body\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"//validate response code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}{{batchName}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}{{batchName}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update valid Mandatory fields_DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"// Parse the response body as JSON\r",
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"StatusCode\"));\r",
									"});\r",
									"// Get the status code of the response\r",
									"var statusCode = pm.response.code;\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"\r",
									"// Validate batchId is a number and is equal to  createdbatchID or not\r",
									"pm.test(\"batchId is a number\", function () {\r",
									"    pm.expect(response.BatchID).to.be.a('number');\r",
									"    pm.expect(response.BatchID).to.eql(pm.environment.get(\"BatchID\"));\r",
									"});\r",
									"\r",
									"// Validate batchName is a string\r",
									"pm.test(\"batchName is a string\", function () {\r",
									"    pm.expect(response.batchName).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Validate programDescription is a string\r",
									"/*pm.test(\"programDescription is a string\", function () {\r",
									"    pm.expect(response.programDescription).to.be.a('string');\r",
									"    pm.expect(response.programDescription).to.eql(pm.environment.get(\"ExpectedProgramDescription\"));\r",
									"});*/\r",
									"\r",
									"// Validate programStatus is a string\r",
									"pm.test(\"batchStatus is a string\", function () {\r",
									"    pm.expect(response.batchStatus).to.be.a('string');\r",
									"});\r",
									"\r",
									"// Validate creationTime and lastModTime are valid ISO 8601 date strings\r",
									"// pm.test(\"creationTime is a valid ISO 8601 date string\", function () {\r",
									"//     pm.expect(response.creationTime).to.be.a('string');\r",
									"//     pm.expect(new Date(response.creationTime)).not.to.be.NaN; // Check if it's a valid date\r",
									"// });\r",
									"\r",
									"// pm.test(\"lastModTime is a valid ISO 8601 date string\", function () {\r",
									"//     pm.expect(response.lastModTime).to.be.a('string');\r",
									"//     pm.expect(new Date(response.lastModTime)).not.to.be.NaN; // Check if it's a valid date\r",
									"// });\r",
									"}\r",
									"else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"var arrayData  = pm.environment.get(\"data_set_entries_batch\");\r",
									"arrayData  = JSON.parse(arrayData);\r",
									"console.log(\"Existing data:\", arrayData);\r",
									"\r",
									"pm.environment.set(\"batchId\", arrayData[0]);\r",
									"pm.environment.set(\"batchName\",arrayData[1]);\r",
									"\r",
									"\r",
									"pm.environment.set(\"batch2_Id\", arrayData[2]);\r",
									"pm.environment.set(\"batch2Name\",arrayData[3]);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"batchName\": \"{{batchName}}\",\r\n  \"batchStatus\": \"{{batchStatus}}\",\r\n  \"batchNoOfClasses\": \"{{batchNoOfClasses}}\",\r\n  \"programId\": \"{{programId}}\",\r\n  \"programName\": \"{{programName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{EndPoint}}/{{BatchID}}",
							"host": [
								"{{BaseURL}}{{EndPoint}}"
							],
							"path": [
								"{{BatchID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Batch by BatchID_DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Check that a response header is present:\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
									"});\r",
									"\r",
									"//Schema validating\r",
									"var jsonData = pm.response.json();\r",
									"var schema={\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"batchId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"batchName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchDescription\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"batchStatus\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"batchNoOfClasses\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"programName\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"batchId\",\r",
									"    \"batchName\",\r",
									"    \"batchDescription\",\r",
									"    \"batchStatus\",\r",
									"    \"batchNoOfClasses\",\r",
									"    \"programId\",\r",
									"    \"programName\"\r",
									"  ]\r",
									"}\r",
									"//Validate the response body\r",
									"pm.test('Schema validation', () => {\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"//validate response code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//validate response message\r",
									"pm.test(\"batchName\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"batchName\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}{{BatchID}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}{{BatchID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Valid Batch ID delete_DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//validate response code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}{{BatchID}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}{{BatchID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Class",
			"item": [
				{
					"name": "CreateNewClass DD Copy 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Example of Pre-request Script (assuming data is fetched programmatically)\r",
									"\r",
									"// Sample data in JSON format, in practice, you would fetch this from an external source\r",
									"const jsonData = {\r",
									"    \"classComments\": \"{{classComments}}\",\r",
									"    \"classDate\": \"{{classDate}}\",\r",
									"    \"classDescription\": \"{{classDescription}}\",\r",
									"    \"classNo\": \"{{classNo}}\",\r",
									"    \"classNotes\": \"{{classNotes}}\",\r",
									"   \"classStaffId\": \"{{classStaffId}}\",\r",
									"    \"classTopic\": \"{{classTopic}}\",\r",
									"    \"classScheduledDates\": [\r",
									"        \"{{classScheduledDates1}}\",\r",
									"        \"{{classScheduledDates2}}\"\r",
									"    ]\r",
									"};\r",
									"\r",
									"// Set variables in Postman environment (or collection)\r",
									"//pm.collectionVariables.set(\"batchId\", jsonData.batchId);\r",
									"//pm.collectionVariables.set(\"classComments\", jsonData.classComments);\r",
									"//pm.collectionVariables.set(\"classDate\", jsonData.classDate);\r",
									"//pm.collectionVariables.set(\"classDescription\", jsonData.classDescription);\r",
									"//pm.collectionVariables.set(\"classNo\", jsonData.classNo);\r",
									"//pm.collectionVariables.set(\"classNotes\", jsonData.classNotes);\r",
									"//pm.collectionVariables.get(\"classRecordingPath\", jsonData.classRecordingPath);\r",
									"//pm.collectionVariables.set(\"classStaffId\", jsonData.classStaffId);\r",
									"//pm.collectionVariables.set(\"classTopic\", jsonData.classTopic);\r",
									"pm.collectionVariables.set(\"classScheduledDates1\", jsonData.classScheduledDates[0]);\r",
									"pm.collectionVariables.set(\"classScheduledDates2\", jsonData.classScheduledDates[1]);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"// Check if the status code is 201\r",
									"if (statusCode === 201) {\r",
									"    console.log('Status code is 201. Running assertions...');\r",
									"var classId=jsonData.csId;\r",
									"var classTopic=jsonData.classTopic;\r",
									"var classStaffId=jsonData.classStaffId;\r",
									"pm.collectionVariables.set(\"classId\",classId);\r",
									"pm.collectionVariables.set(\"classTopic\",classTopic);\r",
									"pm.collectionVariables.set(\"classStaffId\",classStaffId);\r",
									"pm.test(\"Content-Type header is application/json\", ()=>{\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
									"   \r",
									"const expectedJSONSchema = {\r",
									"       \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"csId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"classNo\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"classDate\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"        },\r",
									"        \"classTopic\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classStatus\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"Inactive\", \"Active\"]  // Optional, if values are limited\r",
									"        },\r",
									"        \"classStaffId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classDescription\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classComments\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classNotes\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classRecordingPath\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classScheduledDates\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"string\",\r",
									"                \"format\": \"date-time\"\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"csId\",\r",
									"        \"batchId\",\r",
									"        \"classNo\",\r",
									"        \"classDate\",\r",
									"        \"classTopic\",\r",
									"        \"classStatus\",\r",
									"        \"classStaffId\",\r",
									"        \"classDescription\",\r",
									"        \"classComments\",\r",
									"        \"classNotes\",\r",
									"        \"classRecordingPath\",\r",
									"        \"batchName\",\r",
									"        \"classScheduledDates\"\r",
									"    ]\r",
									"}\r",
									"\r",
									" pm.test(\"Verify JSON Schema\", function () {\r",
									"        pm.response.to.have.jsonSchema(expectedJSONSchema);\r",
									"    });\r",
									"});\r",
									"} else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchId\": {{batch3_Id}},\r\n    \"classComments\": \"{{classComments}}\",\r\n    \"classDate\": \"{{classDate}}\",\r\n    \"classDescription\": \"{{classDescription}}\",\r\n    \"classNo\": \"{{classNo}}\",\r\n    \"classNotes\": \"{{classNotes}}\",\r\n    \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n    \"classStaffId\": \"{{classStaffId}}\",\r\n    \"classTopic\": \"{{classTopic}}\",\r\n    \"classScheduledDates\": [\r\n        \"{{classScheduledDates1}}\",\r\n        \"{{classScheduledDates2}}\"\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllClassesDD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"    // Ensure the response type is JSON\r",
									"    pm.test('Response should be in JSON format', function () {\r",
									"        pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    });\r",
									"    // Validate the response is an array\r",
									"    pm.test('Response should be an array', function () {\r",
									"        pm.expect(response).to.be.an('array');\r",
									"    });\r",
									"\r",
									"    console.log('Number of Classes returned = ' + response.length);\r",
									"\r",
									"    // Initialize an array to hold the program IDs\r",
									"    let classIds = [];\r",
									"\r",
									"    // Check if the response is an array\r",
									"    if (Array.isArray(response)) {\r",
									"        // Iterate over each class object and extract the ID\r",
									"        response.forEach(Class => {\r",
									"            if (Class.csId) {\r",
									"                classIds.push(Class.csId);\r",
									"            }\r",
									"        });\r",
									"\r",
									"        // Print the list of class IDs to the Postman console\r",
									"        console.log('Class IDs:', classIds);\r",
									"\r",
									"        // Example of using extracted IDs in assertions\r",
									"        pm.test('Extracted class IDs should be non-empty', function () {\r",
									"            pm.expect(classIds).to.have.length.above(0);\r",
									"        });\r",
									"\r",
									"       // const programIdToCheck = pm.variables.get(\"programId\"); \r",
									"       const classIdToCheck = pm.environment.get(\"classId\");\r",
									"        \r",
									"\r",
									"        // Write an assertion to check if the specific program ID is present in the response\r",
									"        pm.test(`Class ID ${classIdToCheck} should be present in the response`, function () {\r",
									"            pm.expect(classIds).to.include(classIdToCheck);\r",
									"        });\r",
									"        \r",
									"\r",
									"    } else {\r",
									"        console.log('Response is not an array or does not contain class IDs.');\r",
									"    }\r",
									"}\r",
									"else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetClassRecordingById DD",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetClassByClassTopicDD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"// Check if the status code is 201\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 201. Running assertions...');\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response contains 'Content-Type' header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.csId).to.exist;\r",
									"    pm.expect(responseData.batchId).to.exist;\r",
									"    pm.expect(responseData.classNo).to.exist;\r",
									"    pm.expect(responseData.classDate).to.exist;\r",
									"    pm.expect(responseData.classTopic).to.exist;\r",
									"    pm.expect(responseData.classStatus).to.exist;\r",
									"    pm.expect(responseData.classStaffId).to.exist;\r",
									"    pm.expect(responseData.classDescription).to.exist;\r",
									"    pm.expect(responseData.classComments).to.exist;\r",
									"    pm.expect(responseData.classNotes).to.exist;\r",
									"    pm.expect(responseData.classRecordingPath).to.exist;\r",
									"    pm.expect(responseData.batchName).to.exist;\r",
									"    pm.expect(responseData.classScheduledDates).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"const expectedJSONSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"csId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"classNo\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"classDate\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"        },\r",
									"        \"classTopic\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classStatus\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"Inactive\", \"Active\"]  // Optional, if values are limited\r",
									"        },\r",
									"        \"classStaffId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classDescription\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classComments\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classNotes\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classRecordingPath\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classScheduledDates\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"string\",\r",
									"                \"format\": \"date-time\"\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"csId\",\r",
									"        \"batchId\",\r",
									"        \"classNo\",\r",
									"        \"classDate\",\r",
									"        \"classTopic\",\r",
									"        \"classStatus\",\r",
									"        \"classStaffId\",\r",
									"        \"classDescription\",\r",
									"        \"classComments\",\r",
									"        \"classNotes\",\r",
									"        \"classRecordingPath\",\r",
									"        \"batchName\",\r",
									"        \"classScheduledDates\"\r",
									"    ]\r",
									"}\r",
									"\r",
									" pm.test(\"Verify JSON Schema\", function () {\r",
									"        pm.response.to.have.jsonSchema(expectedJSONSchema);\r",
									"    });\r",
									"\r",
									"}else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}classes/{{classTopic}}",
							"host": [
								"{{BaseURL}}classes"
							],
							"path": [
								"{{classTopic}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Class details byID DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"// Check if the status code is 201\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 201. Running assertions...');\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response contains 'Content-Type' header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.csId).to.exist;\r",
									"    pm.expect(responseData.batchId).to.exist;\r",
									"    pm.expect(responseData.classNo).to.exist;\r",
									"    pm.expect(responseData.classDate).to.exist;\r",
									"    pm.expect(responseData.classTopic).to.exist;\r",
									"    pm.expect(responseData.classStatus).to.exist;\r",
									"    pm.expect(responseData.classStaffId).to.exist;\r",
									"    pm.expect(responseData.classDescription).to.exist;\r",
									"    pm.expect(responseData.classComments).to.exist;\r",
									"    pm.expect(responseData.classNotes).to.exist;\r",
									"    pm.expect(responseData.classRecordingPath).to.exist;\r",
									"    pm.expect(responseData.batchName).to.exist;\r",
									"    pm.expect(responseData.classScheduledDates).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"const expectedJSONSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"csId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"classNo\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"classDate\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"        },\r",
									"        \"classTopic\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classStatus\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"Inactive\", \"Active\"]  // Optional, if values are limited\r",
									"        },\r",
									"        \"classStaffId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classDescription\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classComments\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classNotes\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classRecordingPath\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classScheduledDates\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"string\",\r",
									"                \"format\": \"date-time\"\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"csId\",\r",
									"        \"batchId\",\r",
									"        \"classNo\",\r",
									"        \"classDate\",\r",
									"        \"classTopic\",\r",
									"        \"classStatus\",\r",
									"        \"classStaffId\",\r",
									"        \"classDescription\",\r",
									"        \"classComments\",\r",
									"        \"classNotes\",\r",
									"        \"classRecordingPath\",\r",
									"        \"batchName\",\r",
									"        \"classScheduledDates\"\r",
									"    ]\r",
									"}\r",
									"\r",
									" pm.test(\"Verify JSON Schema\", function () {\r",
									"        pm.response.to.have.jsonSchema(expectedJSONSchema);\r",
									"    });\r",
									"\r",
									"}else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllClassesByStaffId DD",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllRecordings DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllClassesByBatchIdDD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"// Check if the status code is 201\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 201. Running assertions...');\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Response contains 'Content-Type' header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.csId).to.exist;\r",
									"    pm.expect(responseData.batchId).to.exist;\r",
									"    pm.expect(responseData.classNo).to.exist;\r",
									"    pm.expect(responseData.classDate).to.exist;\r",
									"    pm.expect(responseData.classTopic).to.exist;\r",
									"    pm.expect(responseData.classStatus).to.exist;\r",
									"    pm.expect(responseData.classStaffId).to.exist;\r",
									"    pm.expect(responseData.classDescription).to.exist;\r",
									"    pm.expect(responseData.classComments).to.exist;\r",
									"    pm.expect(responseData.classNotes).to.exist;\r",
									"    pm.expect(responseData.classRecordingPath).to.exist;\r",
									"    pm.expect(responseData.batchName).to.exist;\r",
									"    pm.expect(responseData.classScheduledDates).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"const expectedJSONSchema = {\r",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"csId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"batchId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"classNo\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"classDate\": {\r",
									"            \"type\": \"string\",\r",
									"            \"format\": \"date-time\"\r",
									"        },\r",
									"        \"classTopic\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classStatus\": {\r",
									"            \"type\": \"string\",\r",
									"            \"enum\": [\"Inactive\", \"Active\"]  // Optional, if values are limited\r",
									"        },\r",
									"        \"classStaffId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classDescription\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classComments\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classNotes\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classRecordingPath\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"batchName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"classScheduledDates\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"string\",\r",
									"                \"format\": \"date-time\"\r",
									"            }\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"csId\",\r",
									"        \"batchId\",\r",
									"        \"classNo\",\r",
									"        \"classDate\",\r",
									"        \"classTopic\",\r",
									"        \"classStatus\",\r",
									"        \"classStaffId\",\r",
									"        \"classDescription\",\r",
									"        \"classComments\",\r",
									"        \"classNotes\",\r",
									"        \"classRecordingPath\",\r",
									"        \"batchName\",\r",
									"        \"classScheduledDates\"\r",
									"    ]\r",
									"}\r",
									"\r",
									" pm.test(\"Verify JSON Schema\", function () {\r",
									"        pm.response.to.have.jsonSchema(expectedJSONSchema);\r",
									"    });\r",
									"\r",
									"}else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllRecordingwithClassIdDownload DD",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}download/{{classId}}",
							"host": [
								"{{BaseURL}}download"
							],
							"path": [
								"{{classId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetallClassForStudendId",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAllRecordingswithClassId DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateClassRecordingPath DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"classRecordingPath\": \"{{classRecordingPath2}}\",\r\n  \"csId\": {{classId}}\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}updateClassrecording/{{classId}}",
							"host": [
								"{{BaseURL}}updateClassrecording"
							],
							"path": [
								"{{classId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateNewClass DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"batchId\": {{batch3_Id}},\r\n    \"classComments\": \"{{classComments}}\",\r\n    \"classDate\": \"{{classDate}}\",\r\n    \"classDescription\": \"{{classDescription}}\",\r\n    \"classNo\": \"{{classNo}}\",\r\n    \"classNotes\": \"{{classNotes}}\",\r\n    \"classRecordingPath\": \"{{classRecordingPath}}\",\r\n    \"classStaffId\": \"{{classStaffId}}\",\r\n    \"classTopic\": \"{{classTopic}}\",\r\n    \"classScheduledDates\": [\r\n        \"{{classScheduledDates1}}\",\r\n        \"{{classScheduledDates2}}\"\r\n    ]\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteClassById DD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData=pm.response.json();\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteProgramByProgramName",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"/*var responseJson = pm.response.json();\r",
									"var statusCode = pm.response.code;\r",
									"console.log(\"Response  for deleting program with Name\", responseJson.message);\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(pm.response.code).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"// Test to ensure that the response contains a 'message' field\r",
									"pm.test(\"Response contains a message\", function () {\r",
									"    pm.expect(responseJson).to.have.property(\"message\");\r",
									"    pm.expect(responseJson.message).to.be.a(\"string\");\r",
									"    pm.expect(responseJson.message).to.not.be.empty;\r",
									"    pm.expect(responseJson.message).to.contains(\"deleted Successfully!\");\r",
									"    pm.expect(responseJson.success).to.eql(true);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"}else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"}*/\r",
									"var responseText = pm.response.text();\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"pm.test(\"Validating Status Code\", ()=> {\r",
									"    pm.expect(statusCode).to.eql(pm.variables.get(\"statusCode\"));\r",
									"});\r",
									"\r",
									"console.log(\"Response for deleting program with name\", responseText);\r",
									"if (statusCode === 200) {\r",
									"    console.log('Status code is 200. Running assertions...');\r",
									"// Test to ensure that the response contains a 'message' field\r",
									"pm.test(\"Response contains a message\", function () {\r",
									"    pm.expect(responseText).to.include(\"Message\");\r",
									"    pm.expect(responseText).to.contains(\"deleted Successfully!\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"}else {\r",
									"    console.log(`Status code is ${statusCode}. Assertions skipped.`);\r",
									"    /*pm.test(\"Success is true\", function () {\r",
									"    pm.expect(responseText).to.include(\"Success\");\r",
									"    pm.expect(responseText).to.include(\"false\");\r",
									"});*/\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AdminBearer_TokenLMS}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "UserRoleMap",
			"item": [
				{
					"name": "Get All Users",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get by UserId",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete by UserId",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Data Clean Up",
			"item": []
		},
		{
			"name": "UserLogOut",
			"item": [
				{
					"name": "DDH User Logout",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseURL}}{{Endpoint}}",
							"host": [
								"{{BaseURL}}{{Endpoint}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"if (typeof pm.variables.get('requestdata') !== 'object') {\r",
					"    pm.variables.set('requestdata', pm.iterationData.toObject());\r",
					"}\r",
					"const requestdata = pm.variables.get('requestdata');\r",
					"\r",
					"if(typeof requestdata !== 'object' || Object.keys(requestdata).length ===0) {\r",
					"    console.log(\"No external file found\")\r",
					"    return;\r",
					"}\r",
					"\r",
					"const currentrequest = requestdata.requests.filter(({name}) => name === pm.info.requestName) [0];\r",
					"if(!currentrequest){\r",
					"    console.log(`Request ${pm.info.requestName} has no data defined.`);\r",
					"}\r",
					"\r",
					"const variables = currentrequest.data.shift();\r",
					"\r",
					"Object.entries(variables).forEach(([key, value]) => {\r",
					"        pm.variables.set(key, value);\r",
					"    });\r",
					"\r",
					"pm.variables.set('requestdata',requestdata);\r",
					"if(currentrequest.data.length > 0){\r",
					"    pm.execution.setNextRequest(pm.info.requestName)\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "InvalidPID",
			"value": "12",
			"type": "default"
		},
		{
			"key": "InvalidPName",
			"value": "ZXC",
			"type": "default"
		},
		{
			"key": "batch3_Id",
			"value": "9898",
			"type": "string"
		},
		{
			"key": "studentId",
			"value": "U19",
			"type": "string"
		},
		{
			"key": "classRecordingPath2",
			"value": "C:\\\\Recordings2",
			"type": "string"
		},
		{
			"key": "classRecordingPath",
			"value": "C:\\\\Recordings1",
			"type": "string"
		},
		{
			"key": "classScheduledDates1",
			"value": "{{classScheduledDates1}}",
			"type": "string"
		},
		{
			"key": "classScheduledDates2",
			"value": "{{classScheduledDates2}}",
			"type": "string"
		},
		{
			"key": "classId",
			"value": ""
		},
		{
			"key": "classTopic",
			"value": ""
		},
		{
			"key": "classStaffId",
			"value": ""
		}
	]
}